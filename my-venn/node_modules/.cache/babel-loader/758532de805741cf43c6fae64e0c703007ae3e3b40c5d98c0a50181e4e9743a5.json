{"ast":null,"code":"var _jsxFileName = \"/Users/nikhilsingh/Desktop/my-venn/src/components/VennData.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VennData = () => {\n  _s();\n  const [commonAB, setCommonAB] = useState(0);\n  const [uniqueA, setUniqueA] = useState(0);\n  const [uniqueB, setUniqueB] = useState(0);\n  useEffect(() => {\n    fetch(\"/venn_out_data (1).txt\").then(response => response.text()).then(text => parseData(text)).catch(error => console.error(\"Error fetching data:\", error));\n  }, []);\n  const parseData = text => {\n    const lines = text.trim().split(\"\\n\").slice(1); // Split the text by newlines and ignore the header line\n    let commonCount = 0,\n      uniqueACount = 0,\n      uniqueBCount = 0;\n    lines.forEach(line => {\n      const [common, uniqueA, uniqueB] = line.split(/\\s+/); // Split each line by whitespace\n\n      if (common !== \"NA\") commonCount += 1;\n      if (uniqueA !== \"NA\") uniqueACount += 1;\n      if (uniqueB !== \"NA\") uniqueBCount += 1;\n    });\n    setCommonAB(commonCount);\n    setUniqueA(uniqueACount);\n    setUniqueB(uniqueBCount);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Venn Diagram Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Common A B: \", commonAB]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Unique A: \", uniqueA]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Unique B: \", uniqueB]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(VennData, \"lG5B/iEyvKRaUGVkVy9y8qBxz6E=\");\n_c = VennData;\nexport default VennData;\nvar _c;\n$RefreshReg$(_c, \"VennData\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","VennData","_s","commonAB","setCommonAB","uniqueA","setUniqueA","uniqueB","setUniqueB","fetch","then","response","text","parseData","catch","error","console","lines","trim","split","slice","commonCount","uniqueACount","uniqueBCount","forEach","line","common","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/nikhilsingh/Desktop/my-venn/src/components/VennData.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nconst VennData = () => {\n  const [commonAB, setCommonAB] = useState(0);\n  const [uniqueA, setUniqueA] = useState(0);\n  const [uniqueB, setUniqueB] = useState(0);\n\n  useEffect(() => {\n    fetch(\"/venn_out_data (1).txt\")\n      .then((response) => response.text())\n      .then((text) => parseData(text))\n      .catch((error) => console.error(\"Error fetching data:\", error));\n  }, []);\n\n  const parseData = (text) => {\n    const lines = text.trim().split(\"\\n\").slice(1); // Split the text by newlines and ignore the header line\n    let commonCount = 0,\n      uniqueACount = 0,\n      uniqueBCount = 0;\n\n    lines.forEach((line) => {\n      const [common, uniqueA, uniqueB] = line.split(/\\s+/); // Split each line by whitespace\n\n      if (common !== \"NA\") commonCount += 1;\n      if (uniqueA !== \"NA\") uniqueACount += 1;\n      if (uniqueB !== \"NA\") uniqueBCount += 1;\n    });\n\n    setCommonAB(commonCount);\n    setUniqueA(uniqueACount);\n    setUniqueB(uniqueBCount);\n  };\n\n  return (\n    <div>\n      <h3>Venn Diagram Data</h3>\n      <p>Common A B: {commonAB}</p>\n      <p>Unique A: {uniqueA}</p>\n      <p>Unique B: {uniqueB}</p>\n    </div>\n  );\n};\n\nexport default VennData;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC;EAC3C,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EACzC,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC;EAEzCD,SAAS,CAAC,MAAM;IACdY,KAAK,CAAC,wBAAwB,CAAC,CAC5BC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEE,IAAI,IAAKC,SAAS,CAACD,IAAI,CAAC,CAAC,CAC/BE,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC,CAAC;EACnE,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMF,SAAS,GAAID,IAAI,IAAK;IAC1B,MAAMK,KAAK,GAAGL,IAAI,CAACM,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,IAAI,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IAChD,IAAIC,WAAW,GAAG,CAAC;MACjBC,YAAY,GAAG,CAAC;MAChBC,YAAY,GAAG,CAAC;IAElBN,KAAK,CAACO,OAAO,CAAEC,IAAI,IAAK;MACtB,MAAM,CAACC,MAAM,EAAErB,OAAO,EAAEE,OAAO,CAAC,GAAGkB,IAAI,CAACN,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;;MAEtD,IAAIO,MAAM,KAAK,IAAI,EAAEL,WAAW,IAAI,CAAC;MACrC,IAAIhB,OAAO,KAAK,IAAI,EAAEiB,YAAY,IAAI,CAAC;MACvC,IAAIf,OAAO,KAAK,IAAI,EAAEgB,YAAY,IAAI,CAAC;IACzC,CAAC,CAAC;IAEFnB,WAAW,CAACiB,WAAW,CAAC;IACxBf,UAAU,CAACgB,YAAY,CAAC;IACxBd,UAAU,CAACe,YAAY,CAAC;EAC1B,CAAC;EAED,oBACEvB,OAAA;IAAA2B,QAAA,gBACE3B,OAAA;MAAA2B,QAAA,EAAI;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC1B/B,OAAA;MAAA2B,QAAA,GAAG,cAAY,EAACxB,QAAQ;IAAA;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC7B/B,OAAA;MAAA2B,QAAA,GAAG,YAAU,EAACtB,OAAO;IAAA;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC1B/B,OAAA;MAAA2B,QAAA,GAAG,YAAU,EAACpB,OAAO;IAAA;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvB,CAAC;AAEV,CAAC;AAAC7B,EAAA,CAvCID,QAAQ;AAAA+B,EAAA,GAAR/B,QAAQ;AAyCd,eAAeA,QAAQ;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}